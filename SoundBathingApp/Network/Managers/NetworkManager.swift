//
//  NetworkManager.swift
//  SoundBathingApp
//
//  Created by –ò—Ä–∏–Ω–∞ –ü–µ—á–∏–∫ on 06.02.2025.
//

import Foundation
import UIKit

class NetworkManager: NSObject, URLSessionDelegate {
    static let shared = NetworkManager()
    private let host = "http://localhost:5046"

    // MARK: - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    func perfomeRequest<T: Codable>(
        endPoint: String,
        method: HttpMethods,
        body: Data? = nil,
        queryParameters: [String: Any]? = nil,
        multipartFormData: MultipartFormData? = nil) async -> Result<T, NetworkError>
    {
        guard let url = URL(string: "\(host)\(endPoint)") else {
            return .failure(.invalidUrl)
        }
        
        
        let request: URLRequest
        if let multiData = multipartFormData {
            // –°–æ–∑–¥–∞–µ–º multipart/form-data –∑–∞–ø—Ä–æ—Å
            request = createMultipartFormDataRequest(
                url: url,
                method: method,
                multipartFormData: multiData)
        } else {
            request = createRequest(
                url: url,
                method: method,
                body: body,
                queryParameters: queryParameters)
        }
        
        print(requestDescription(request))
        print("""
        üåê Request Debug Info:
        URL: \(url)
        Method: \(method.rawValue)
        Token exists: \(KeyChainManager.shared.getToken() != nil)
        Headers: \(request.allHTTPHeaderFields ?? [:])
        Body: \(body != nil ? String(data: body!, encoding: .utf8) ?? "nil" : "nil")
        """)
        let session = URLSession(configuration: .default, delegate: self, delegateQueue: nil)
        
        do {
            let (data, response) = try await session.data(for: request)
            
            print(responseDescription(response, data)) // –õ–æ–≥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π HTTP-–æ—Ç–≤–µ—Ç
            guard let httpResponse = response as? HTTPURLResponse else {
                return .failure(.serverError("Invalid response"))
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
            if (200...299).contains(httpResponse.statusCode) {
                if T.self == EmptyResponse.self {
                    // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø ‚Äî Void, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
                    return .success(EmptyResponse() as! T)
                }
                else if !data.isEmpty {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                    do {
                        let decodedData = try JSONDecoder().decode(T.self, from: data)
                        return .success(decodedData)
                    } catch {
                        return .failure(.decodableError)
                    }
                } else {
                    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ —Ç–∏–ø –Ω–µ Void, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    return .failure(.nullData)
                }
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                if !data.isEmpty {
                    if let errorResponse = try? JSONDecoder().decode(ServerErrorResponse.self, from: data) {
                        return .failure(.serverError(errorResponse.detail))
                    } else {
                        return .failure(.serverError("Something went wrong"))
                    }
                } else {
                    return .failure(.serverError("No data received"))
                }
            }
            
        } catch {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
            return .failure(.networkError(error.localizedDescription))
        }
        
    }
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    func downloadImage(from endPoint: String) async -> Result<UIImage, NetworkError> {
        guard let url = URL(string: "\(host)\(endPoint)") else {
            return .failure(.invalidUrl)
        }

        var request = URLRequest(url: url)
        request.httpMethod = HttpMethods.GET.rawValue

        if let token = KeyChainManager.shared.getToken() {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }

        let session = URLSession(configuration: .default, delegate: self, delegateQueue: nil)

        do {
            let (data, response) = try await session.data(for: request)

            guard let httpResponse = response as? HTTPURLResponse else {
                return .failure(.serverError("Invalid response"))
            }

            if (200...299).contains(httpResponse.statusCode) {
                if let image = UIImage(data: data) {
                    return .success(image)
                } else {
                    return .failure(.imageDecodingError)
                }
            } else {
                return .failure(.serverError("Failed to download image, status code: \(httpResponse.statusCode)"))
            }
        } catch {
            return .failure(.networkError(error.localizedDescription))
        }
    }
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
    func downloadAudio(from endPoint: String) async -> Result<Data, NetworkError> {
        guard let url = URL(string: "\(host)\(endPoint)") else {
            return .failure(.invalidUrl)
        }

        var request = URLRequest(url: url)
        request.httpMethod = HttpMethods.GET.rawValue

        if let token = KeyChainManager.shared.getToken() {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }

        let session = URLSession(configuration: .default, delegate: self, delegateQueue: nil)

        do {
            let (data, response) = try await session.data(for: request)

            guard let httpResponse = response as? HTTPURLResponse else {
                return .failure(.serverError("Invalid response"))
            }

            if (200...299).contains(httpResponse.statusCode) {
                return .success(data)
            } else {
                return .failure(.serverError("Failed to download audio, status code: \(httpResponse.statusCode)"))
            }
        } catch {
            return .failure(.networkError(error.localizedDescription))
        }
    }
    
    // MARK: - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (JSON)
    private func createRequest(
        url: URL,
        method: HttpMethods,
        body: Data? = nil,
        queryParameters: [String: Any]? = nil) -> URLRequest {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false)
            
        // –î–æ–±–∞–≤–ª—è–µ–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if let queryParameters = queryParameters {
            urlComponents?.queryItems = createQueryItems(from: queryParameters)
        }
            
        // –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π URL —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        guard let finalURL = urlComponents?.url else {
            fatalError("Failed to create URL with query parameters")
        }
            
        var request = URLRequest(url: finalURL)
        request.httpMethod = method.rawValue;
            
        if method != .GET {
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ö—ç–¥–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
        if let token = KeyChainManager.shared.getToken() {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }
        request.setValue("*/*", forHTTPHeaderField: "Accept")
        request.setValue("gzip, deflate, br", forHTTPHeaderField: "Accept-Encoding")
        request.setValue("keep-alive", forHTTPHeaderField: "Connection")
            
        if let body = body {
            request.httpBody = body
        }
        
        return request
    }
    
    private func createQueryItems(from parameters: [String: Any])  -> [URLQueryItem] {
        var queryItems = [URLQueryItem]()
        
        for (key, value) in parameters {
            if let stringValue = value as? String {
                queryItems.append(URLQueryItem(name: key, value: stringValue))
            }
            else if let arrayValue = value as? [String] {
                // –î–ª—è –º–∞—Å—Å–∏–≤–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –æ–¥–Ω–∏–º –∫–ª—é—á–æ–º
                arrayValue.forEach {
                    queryItems.append(URLQueryItem(name: key, value: $0))
                }
            }
            else if let dictValue = value as? [String: [String]] {
                // –î–ª—è —Å–ª–æ–≤–∞—Ä—è —Å –º–∞—Å—Å–∏–≤–∞–º–∏
                for (subKey, subArray) in dictValue {
                    subArray.forEach {
                        queryItems.append(URLQueryItem(name: "\(key)[\(subKey)]", value: $0))
                    }
                }
            }
        }
        
        return queryItems
    }
    
    // MARK: - –°–æ–∑–¥–∞–Ω–∏–µ multipart/form-data –∑–∞–ø—Ä–æ—Å–∞
    private func createMultipartFormDataRequest(
        url: URL,
        method: HttpMethods,
        multipartFormData: MultipartFormData) -> URLRequest {
            
        var request = URLRequest(url: url)
        request.httpMethod = method.rawValue
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è multipart/form-data
        let boundary = UUID().uuidString
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        var body = Data()
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        for (key, value) in multipartFormData.parameters {
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"\(key)\"\r\n\r\n".data(using: .utf8)!)
            body.append("\(value)\r\n".data(using: .utf8)!)
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for (key, fileData) in multipartFormData.files {
            body.append("--\(boundary)\r\n".data(using: .utf8)!)
            body.append("Content-Disposition: form-data; name=\"\(key)\"; filename=\"\(fileData.fileName)\"\r\n".data(using: .utf8)!)
            body.append("Content-Type: \(fileData.mimeType)\r\n\r\n".data(using: .utf8)!)
            body.append(fileData.data)
            body.append("\r\n".data(using: .utf8)!)
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body.append("--\(boundary)--\r\n".data(using: .utf8)!)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        request.httpBody = body
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if let token = KeyChainManager.shared.getToken() {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }
        request.setValue("application/json", forHTTPHeaderField: "Accept")

        return request
    }
    
    // MARK: - –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    func urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) {
        let host = challenge.protectionSpace.host
        print("üîê Handling SSL challenge for:", host)
        
        if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust,
           let serverTrust = challenge.protectionSpace.serverTrust {
            
            // –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
            if ["localhost", "127.0.0.1"].contains(host) {
                print("‚úÖ Trusting localhost SSL")
                completionHandler(.useCredential, URLCredential(trust: serverTrust))
                return
            }
        }
        completionHandler(.performDefaultHandling, nil)
    }
//    func urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) {
//        if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust,
//           let serverTrust = challenge.protectionSpace.serverTrust,
//           challenge.protectionSpace.host == "localhost" {
//            let credential = URLCredential(trust: serverTrust)
//            completionHandler(.useCredential, credential)
//            return
//        }
//        completionHandler(.performDefaultHandling, nil)
//    }
    
    // MARK: - Debug methods
    private func requestDescription(_ request: URLRequest) -> String {
        var output = "\nüì° [REQUEST] \(request.httpMethod ?? "UNKNOWN") \(request.url?.absoluteString ?? "NO URL")\n"
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        if let headers = request.allHTTPHeaderFields, !headers.isEmpty {
            output += "üìù Headers:\n"
            for (key, value) in headers {
                output += "   \(key): \(value)\n"
            }
        }
        
        // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        if let body = request.httpBody, let bodyString = String(data: body, encoding: .utf8) {
            output += "üì¶ Body:\n\(bodyString)\n"
        } else {
            output += "üì¶ Body: EMPTY\n"
        }
        
        return output
    }
    
    private func responseDescription(_ response: URLResponse?, _ data: Data?) -> String {
        guard let httpResponse = response as? HTTPURLResponse else {
            return "‚ùå [RESPONSE] –û—à–∏–±–∫–∞: –Ω–µ—Ç HTTP-–æ—Ç–≤–µ—Ç–∞"
        }
        
        var output = "\n‚úÖ [RESPONSE] \(httpResponse.statusCode) \(httpResponse.url?.absoluteString ?? "NO URL")\n"
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        output += "üìù Headers:\n"
        for (key, value) in httpResponse.allHeaderFields {
            output += "   \(key): \(value)\n"
        }
        
        // –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        if let data = data, let jsonString = String(data: data, encoding: .utf8) {
            output += "üì¶ Body:\n\(jsonString)\n"
        } else {
            output += "üì¶ Body: EMPTY\n"
        }
        
        return output
    }

}

// MARK: - –ú–æ–¥–µ–ª—å –¥–ª—è multipart/form-data
struct MultipartFormData {
    var parameters: [String: String] // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    var files: [String: FileData] // –§–∞–π–ª—ã
}

struct FileData {
    var data: Data // –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
    var fileName: String // –ò–º—è —Ñ–∞–π–ª–∞
    var mimeType: String // MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
}
