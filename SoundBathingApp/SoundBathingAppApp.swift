//
//  SoundBathingAppApp.swift
//  SoundBathingApp
//
//  Created by –ò—Ä–∏–Ω–∞ –ü–µ—á–∏–∫ on 06.02.2025.
//

import SwiftUI

@main
struct SoundBathingAppApp: App {
//    @AppStorage("hasShownWelcome") var hasShownWelcome = false
//    @State private var showMainView = false
//    @State private var showSurveyView = false
    @StateObject private var practicesVM = GetPracticesViewModel()
    @StateObject private var appViewModel = AppViewModel()
    var body: some Scene {
        WindowGroup {
//            OnboardingView()
            ContentView()
                .environmentObject(appViewModel)
                .environmentObject(practicesVM)
                .onAppear {
                    appViewModel.setupBackgroundTasks() // ‚Üê –ó–¥–µ—Å—å!

                    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                    Task {
                        await practicesVM.getAllPractices()
                    }
                }
//            MeditationSurveyView()
//            if showMainView {
//                MainView()
//            } else {
//                // TODO: –°–¥–µ–ª–∞—Ç—å —Ç—É—Ç –ø–æ—Ç–æ–º –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ä–µ—à–µ–Ω–∏–µ, –∫–∞–∫–æ–µ –≤—å—é –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å
//                WelcomeQuoteView(showMainView: $showMainView, showSurveyView: $showSurveyView)
//            }
//            ContentView()
//            if !hasShownWelcome {
//                WelcomeQuoteView()
//                    .onDisappear {
//                        hasShownWelcome = true
//                    }
//            } else {
//                MainView()
//                    .withRouter()
//            }
//             TODO: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
//            if KeyChainManager.shared.getToken() != nil {
//                MainView()
//                    .withRouter()
//            } else {
//               SignInView()
//                    .withRouter()
//            }
//            
//            
//            CreateMeditationView()
//            SignInView()
//            BirthdateEnteringView()
//            RegisterView()
//            NameEnteringView()
        }
    }
}

//func f() {
//    for family in UIFont.familyNames.sorted() {
//        print("Family: \(family)")
//        
//        let fontNames = UIFont.fontNames(forFamilyName: family)
//        for fontName in fontNames {
//            print("    Font: \(fontName)")
//        }
//    }
//}

struct ContentView: View {
    @EnvironmentObject var appViewModel: AppViewModel
    @EnvironmentObject var practicesVM: GetPracticesViewModel

    var body: some View {
        Group {
            if appViewModel.showOnboarding {
                OnboardingView()
            } else if appViewModel.showMainView {
                MainView()
            } else if appViewModel.showSurveyView {
                MeditationSurveyView()
            } else {
                WelcomeQuoteView(showMainView: $appViewModel.showMainView, showSurveyView: $appViewModel.showSurveyView)
            }
        }
    }
}

// TODO: —Å–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–∫—É
class AppViewModel: ObservableObject {
    @Published var showMainView = false
    @Published var showSurveyView = false
    @Published var skipRecommendations = false
    @Published var showOnboarding = !UserDefaults.standard.bool(forKey: "completedOnboarding")
    
    private let surveyInterval: TimeInterval = 1 * 3600 // 5 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    init() {
        checkSurveyConditions()
    }
    
    private func checkInitialState() {
        // 1) –ê–¥–º–∏–Ω–∏—Å—Ç—Ç–æ—Ä –∏–ª–∏ –Ω–µ—Ç
        // 2) –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç
        // 3) –¶–∏—Ç–∞—Ç–∞
        // 4) –û–ø—Ä–æ—Å
        // 5) –ì–ª–∞–≤–Ω–æ–µ –≤—å—é
    }
    
    /// –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.
    func completeOnboarding() {
        UserDefaults.standard.set(true, forKey: "completedOnboarding")
        showOnboarding = false
        checkSurveyConditions()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è –æ–ø—Ä–æ—Å.
    func checkSurveyConditions() {
        let lastSurveyDate = UserDefaults.standard.object(forKey: "lastSurveyDate") as? Date ?? Date.distantPast
        let timeSinceLastSurvey = Date().timeIntervalSince(lastSurveyDate)
        
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 —á–∞—Å–æ–≤ –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        if timeSinceLastSurvey > surveyInterval {
            showSurveyView = true
            showMainView = false
        } else {
            showMainView = true
            showSurveyView = false
        }
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
    func setupBackgroundTasks() {
        setupDailyMeditationReminder()
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    private func setupDailyMeditationReminder() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound]) { granted, _ in
            if granted {
                self.scheduleDailyReminder()
                print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ")
            }
        }
    }
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    private func scheduleDailyReminder() {
        let center = UNUserNotificationCenter.current()
        center.removePendingNotificationRequests(withIdentifiers: ["dailyMeditationReminder"])
        
        let content = UNMutableNotificationContent()
        content.title = "Mindful Reminder"
        content.body = "Time to meditate üßò‚Äç‚ôÇÔ∏è"
        content.sound = .default
        
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –µ–∂–µ–¥–µ–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ( 11:00 —É—Ç—Ä–∞)
        var dateComponents = DateComponents()
        dateComponents.hour = 11
        dateComponents.minute = 00
        
        let trigger = UNCalendarNotificationTrigger(
            dateMatching: dateComponents,
            repeats: true
        )
        
        let request = UNNotificationRequest(
            identifier: "dailyMeditationReminder",
            content: content,
            trigger: trigger
        )
        
        center.add(request) { error in
            if let error = error {
                print("Error scheduling notification: \(error.localizedDescription)")
            } else {
                print("Daily meditation reminder scheduled successfully")
            }
        }
    }
    
    func didCompleteSurvey() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞
        UserDefaults.standard.set(Date(), forKey: "lastSurveyDate")
        showSurveyView = false
        showMainView = true
    }
    
    func skipSurveyAndRecommendations() {
//        UserDefaults.standard.set(true, forKey: "skipRecommendations")
        skipRecommendations = true
        showSurveyView = false
        showMainView = true
    }


}
